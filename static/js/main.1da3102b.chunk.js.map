{"version":3,"sources":["constants/initialState.js","core/ui/actions.js","core/ui/reducers.js","core/reducers.js","core/sagas.js","core/ui/sagas.js","core/store.js","components/App.jsx","serviceWorker.js","index.jsx"],"names":["initialState","ui","actions","SET_SCALE","setScale","data","type","payload","reducer","state","action","scale","appReducer","combineReducers","sagas","combinedSagas","all","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","coreSagas","ws","WebSocket","useStyles","createUseStyles","boxSizing","body","background","color","fontFamily","fontSize","overflowY","input","border","width","padding","bottom","p","margin","messages","paddingBottom","wrap","height","maxHeight","display","flexDirection","App","classes","useState","hasName","setHasName","message","setMessage","setMessages","name","setName","uiMessage","send","JSON","stringify","sendMessage","useEffect","onmessage","scrollTo","document","scrollHeight","documentElement","className","map","m","onChange","e","target","value","onKeyPress","key","placeholder","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8NAAaA,EAAe,CAC1BC,GAAI,I,QCDAC,EAAU,CACdC,UAAW,eACXC,SAAU,SAAAC,GAAI,MAAK,CACjBC,KAAMJ,EAAQC,UACdI,QAASF,KAIEH,ICOAM,EAbC,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACtC,OAAQA,EAAOJ,MACb,KAAKJ,EAAQC,UACX,OAAO,eACFM,EADL,CAEEE,MAAOD,EAAOH,UAGlB,QACE,OAAOE,ICRPG,EAAaC,YAAgB,CACjCZ,O,4CCCuBa,GAFnBC,EAAa,YCAJ,IDEA,SAAUD,IAAV,iEACb,OADa,SACPE,YAAID,GADG,uCEEf,IAAME,EAAiBC,cAGjBC,EAAmBC,OAAOC,sCAAwCC,IAElEC,EAAQC,aHLC,SAACf,EAAOC,GACrB,OAAOE,EAAWH,EAAOC,KGMzBV,EACAmB,EAAiBM,YAAgBR,KAGnCA,EAAeS,IAAIC,GAEJJ,Q,gBChBTK,EAAK,I,MAAIC,cAAU,wCAEnBC,EAAYC,aAAgB,iBAAO,CACvC,UAAW,CACT,IAAK,CACHC,UAAW,cAEbC,KAAM,CACJC,WAAY,QACZC,MAAO,QACPC,WAAY,UACZC,SAAU,GACVC,UAAW,UAEbC,MAAO,CACLC,OAAQ,oBACRC,MAAO,OACPC,QAAS,GACTR,WAAY,UACZC,MAAO,QACPC,WAAY,UACZC,SAAU,GACVM,OAAQ,GAEVC,EAAG,CACDC,OAAQ,EACRH,QAAS,IAGbI,SAAU,CACRC,cAAe,IAEjBC,KAAM,CACJP,MAAO,OACPQ,OAAQ,OACRC,UAAW,OACXC,QAAS,OACTC,cAAe,cA6DJC,EAzDH,WACV,IAAMC,EAAUxB,IADA,EAEcyB,oBAAS,GAFvB,mBAETC,EAFS,KAEAC,EAFA,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIgBJ,mBAAS,IAJzB,mBAITT,EAJS,KAICc,EAJD,OAKQL,mBAAS,IALjB,mBAKTM,EALS,KAKHC,EALG,KASVC,EAAY,SAACxB,GACjBoB,EAAWpB,GAJO,SAACA,GACnBX,EAAGoC,KAAKC,KAAKC,UAAU,CAAEL,OAAMtB,QAAOjC,KAAM,aAI5C6D,CAAY5B,GACZoB,EAAW,KAcb,OANAS,qBAAU,WACRxC,EAAGyC,UAAY,YAAe,IAAZhE,EAAW,EAAXA,KAChBuD,EAAY,GAAD,mBAAKd,GAAL,CAAezC,KAC1Be,OAAOkD,SAAS,EAAGC,SAAStC,KAAKuC,cAAgBD,SAASE,gBAAgBD,kBAI5E,6BACGhB,GACC,yBAAKkB,UAAWpB,EAAQN,MACtB,yBAAK0B,UAAWpB,EAAQR,UACrBA,EAAS6B,KAAI,SAACC,GAAD,OACZ,2BAAIA,OAGR,2BACEtE,KAAK,OACLuE,SAAU,SAACC,GAAD,OAAOnB,EAAWmB,EAAEC,OAAOC,QACrCC,WAAY,SAACH,GAAD,MAAiB,UAAVA,EAAEI,KAAmBnB,EAAUe,EAAEC,OAAOC,QAC3DA,MAAOtB,EACPyB,YAAY,oBAIhB3B,GACA,2BACElD,KAAK,OACLuE,SAAU,SAACC,GAAD,OAAOhB,EAAQgB,EAAEC,OAAOC,QAClCC,WAAY,SAACH,GAAD,MAAiB,UAAVA,EAAEI,MAlCd3C,EAkCuCuC,EAAEC,OAAOC,MAjC7DvB,GAAW,GACXK,EAAQvB,QACRX,EAAGoC,KAAKC,KAAKC,UAAU,CAAEL,KAAMtB,EAAOA,MAAO,GAAIjC,KAAM,iBAH3C,IAACiC,GAmCPyC,MAAOnB,EACPsB,YAAY,yBCnFhBC,EAAcC,QACW,cAA7BjE,OAAOkE,SAASC,UAEe,UAA7BnE,OAAOkE,SAASC,UAEhBnE,OAAOkE,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzF,QACfmF,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OACP,kBAAC,IAAD,CAAUtF,MAAOA,GACf,kBAAC,EAAD,OAEFgD,SAASuC,eAAe,SDWnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB5F,OAAOkE,SAAS2B,MACpDC,SAAW9F,OAAOkE,SAAS4B,OAIvC,OAGF9F,OAAO+F,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,GAAN,sBAEP5B,IAgEV,SAAiCM,EAAOC,GAEtCyB,MAAM1B,GACHK,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7B3E,OAAOkE,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEArFAuB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCjC/BE,K","file":"static/js/main.1da3102b.chunk.js","sourcesContent":["export const initialState = {\n  ui: {},\n};\n\nexport default initialState;\n","const actions = {\n  SET_SCALE: 'UI_SET_SCALE',\n  setScale: data => ({\n    type: actions.SET_SCALE,\n    payload: data,\n  }),\n};\n\nexport default actions;\n","import actions from './actions';\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case actions.SET_SCALE:\n      return {\n        ...state,\n        scale: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport ui from 'core/ui/reducers';\n\nconst appReducer = combineReducers({\n  ui,\n});\n\nexport default (state, action) => {\n  return appReducer(state, action);\n};\n","import { all } from 'redux-saga/effects';\nimport uiSagas from 'core/ui/sagas';\n\nconst combinedSagas = [...uiSagas];\n\nexport default function* sagas() {\n  yield all(combinedSagas);\n}\n","// import { takeEvery, put } from 'redux-saga/effects';\n// import uiActions from './actions';\n\nexport default [];\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { initialState } from 'constants/initialState';\n\nimport coreReducers from './reducers';\nimport coreSagas from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// eslint-disable-next-line\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  coreReducers,\n  initialState,\n  composeEnhancers(applyMiddleware(sagaMiddleware)),\n);\n\nsagaMiddleware.run(coreSagas);\n\nexport default store;\n","import React, { useEffect, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { w3cwebsocket as WebSocket } from 'websocket';\n\nconst ws = new WebSocket('ws://rathe001-test-app.herokuapp.com');\n\nconst useStyles = createUseStyles(() => ({\n  '@global': {\n    '*': {\n      boxSizing: 'border-box',\n    },\n    body: {\n      background: 'black',\n      color: 'green',\n      fontFamily: 'Verdana',\n      fontSize: 16,\n      overflowY: 'hidden',\n    },\n    input: {\n      border: '1px solid #666666',\n      width: '100%',\n      padding: 10,\n      background: '#111111',\n      color: 'green',\n      fontFamily: 'Verdana',\n      fontSize: 16,\n      bottom: 0,\n    },\n    p: {\n      margin: 0,\n      padding: 0,\n    },\n  },\n  messages: {\n    paddingBottom: 10,\n  },\n  wrap: {\n    width: '100%',\n    height: '100%',\n    maxHeight: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const [hasName, setHasName] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [name, setName] = useState('');\n  const sendMessage = (input) => {\n    ws.send(JSON.stringify({ name, input, type: 'message' }));\n  };\n  const uiMessage = (input) => {\n    setMessage(input);\n    sendMessage(input);\n    setMessage('');\n  };\n  const login = (input) => {\n    setHasName(true);\n    setName(input);\n    ws.send(JSON.stringify({ name: input, input: '', type: 'connection' }));\n  };\n\n  useEffect(() => {\n    ws.onmessage = ({ data }) => {\n      setMessages([...messages, data]);\n      window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight);\n    };\n  });\n  return (\n    <div>\n      {hasName && (\n        <div className={classes.wrap}>\n          <div className={classes.messages}>\n            {messages.map((m) => (\n              <p>{m}</p>\n            ))}\n          </div>\n          <input\n            type=\"text\"\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && uiMessage(e.target.value)}\n            value={message}\n            placeholder=\"Enter message\"\n          />\n        </div>\n      )}\n      {!hasName && (\n        <input\n          type=\"text\"\n          onChange={(e) => setName(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && login(e.target.value)}\n          value={name}\n          placeholder=\"What is your name?\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'core/store';\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}