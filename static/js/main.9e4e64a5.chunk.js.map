{"version":3,"sources":["constants/initialState.js","core/ui/actions.js","core/ui/reducers.js","core/reducers.js","core/sagas.js","core/ui/sagas.js","core/store.js","components/App.jsx","serviceWorker.js","index.jsx"],"names":["initialState","ui","actions","SET_SCALE","setScale","data","type","payload","reducer","state","action","scale","appReducer","combineReducers","sagas","combinedSagas","all","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","coreSagas","ws","WebSocket","useStyles","createUseStyles","boxSizing","body","background","color","fontFamily","fontSize","overflowY","padding","margin","input","position","border","width","bottom","p","messages","flexGrow","height","wrap","maxHeight","display","flexDirection","App","classes","useState","hasName","setHasName","message","setMessage","setMessages","name","setName","uiMessage","send","JSON","stringify","sendMessage","useEffect","onopen","console","log","onmessage","m","parse","document","querySelector","scrollIntoView","className","map","key","id","onChange","e","target","value","onKeyPress","placeholder","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9e4e64a5.chunk.js","sourcesContent":["export const initialState = {\n  ui: {},\n};\n\nexport default initialState;\n","const actions = {\n  SET_SCALE: 'UI_SET_SCALE',\n  setScale: data => ({\n    type: actions.SET_SCALE,\n    payload: data,\n  }),\n};\n\nexport default actions;\n","import actions from './actions';\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case actions.SET_SCALE:\n      return {\n        ...state,\n        scale: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport ui from 'core/ui/reducers';\n\nconst appReducer = combineReducers({\n  ui,\n});\n\nexport default (state, action) => {\n  return appReducer(state, action);\n};\n","import { all } from 'redux-saga/effects';\nimport uiSagas from 'core/ui/sagas';\n\nconst combinedSagas = [...uiSagas];\n\nexport default function* sagas() {\n  yield all(combinedSagas);\n}\n","// import { takeEvery, put } from 'redux-saga/effects';\n// import uiActions from './actions';\n\nexport default [];\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { initialState } from 'constants/initialState';\n\nimport coreReducers from './reducers';\nimport coreSagas from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// eslint-disable-next-line\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  coreReducers,\n  initialState,\n  composeEnhancers(applyMiddleware(sagaMiddleware)),\n);\n\nsagaMiddleware.run(coreSagas);\n\nexport default store;\n","import React, { useEffect, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { w3cwebsocket as WebSocket } from 'websocket';\n\nconst ws = new WebSocket('ws://rathe001-test-app.herokuapp.com');\n\nconst useStyles = createUseStyles(() => ({\n  '@global': {\n    '*': {\n      boxSizing: 'border-box',\n    },\n    body: {\n      background: 'black',\n      color: 'green',\n      fontFamily: 'Verdana',\n      fontSize: 16,\n      overflowY: 'hidden',\n      padding: 0,\n      margin: 0,\n    },\n    input: {\n      position: 'fixed',\n      border: '1px solid #666666',\n      width: '100%',\n      padding: 10,\n      background: '#111111',\n      color: 'green',\n      fontFamily: 'Verdana',\n      fontSize: 16,\n      bottom: 0,\n    },\n    p: {\n      margin: 0,\n      padding: 0,\n    },\n  },\n  messages: {\n    flexGrow: 1,\n    padding: [10, 10, 50, 10],\n    overflowY: 'auto',\n    height: '100%',\n  },\n  wrap: {\n    width: '100vw',\n    height: '100vh',\n    maxHeight: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const [hasName, setHasName] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [name, setName] = useState('');\n  const sendMessage = (input) => {\n    ws.send(JSON.stringify({ name, input, type: 'message' }));\n  };\n  const uiMessage = (input) => {\n    setMessage(input);\n    sendMessage(input);\n    setMessage('');\n  };\n  const login = (input) => {\n    setHasName(true);\n    setName(input);\n    ws.send(JSON.stringify({ name: input, input: '', type: 'connection' }));\n  };\n\n  useEffect(() => {\n    ws.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n    ws.onmessage = (m) => {\n      setMessages([...messages, JSON.parse(m.data)]);\n      const messagesPanel = document.querySelector(`.${classes.messages} p:last-child`);\n      messagesPanel.scrollIntoView();\n    };\n  });\n  return (\n    <div>\n      <div className={classes.wrap}>\n        <div className={classes.messages}>\n          {messages.map((m) =>\n            m.type === 'connection' ? (\n              <p key={m.id}>{m.name} has connected!</p>\n            ) : (\n              <p key={m.id}>\n                {m.name} says, &quot;{m.input}&quot;\n              </p>\n            ),\n          )}\n        </div>\n        {hasName ? (\n          <input\n            type=\"text\"\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && uiMessage(e.target.value)}\n            value={message}\n            placeholder=\"Enter message\"\n          />\n        ) : (\n          <input\n            type=\"text\"\n            onChange={(e) => setName(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && login(e.target.value)}\n            value={name}\n            placeholder=\"What is your name?\"\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'core/store';\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}